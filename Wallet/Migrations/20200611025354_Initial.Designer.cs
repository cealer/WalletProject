// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalletService.Service.Infrastructure;

namespace WalletService.API.Migrations
{
    [DbContext(typeof(WalletContext))]
    [Migration("20200611025354_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WalletService.Domain.AggregatesModel.WalletAggregate.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnName("Balance")
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasMaxLength(36);

                    b.HasKey("Id");

                    b.ToTable("Wallets","wallet_service");
                });

            modelBuilder.Entity("WalletService.Service.Domain.AggregatesModel.PaymentAggregate.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnName("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<Guid>("_walletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("_walletId");

                    b.ToTable("Payments","wallet_service");
                });

            modelBuilder.Entity("WalletService.Service.Domain.AggregatesModel.PaymentAggregate.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("PaymentMethodId")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod","wallet_service");
                });

            modelBuilder.Entity("WalletService.Service.Domain.AggregatesModel.WalletService.Aggregate.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepositsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Deposits","wallet_service");
                });

            modelBuilder.Entity("WalletService.Service.Domain.AggregatesModel.PaymentAggregate.Payment", b =>
                {
                    b.HasOne("WalletService.Service.Domain.AggregatesModel.PaymentAggregate.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletService.Domain.AggregatesModel.WalletAggregate.Wallet", null)
                        .WithMany()
                        .HasForeignKey("_walletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalletService.Service.Domain.AggregatesModel.WalletService.Aggregate.Deposit", b =>
                {
                    b.HasOne("WalletService.Domain.AggregatesModel.WalletAggregate.Wallet", null)
                        .WithMany("Deposits")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
